- hosts:
  - mfdp.local
  become: false
  gather_facts: false
  collections: sviridov.dataprotector

  vars:
    test_user_1:
      webusername: "win_user|*|client.company.com"
      name: win_user
      dp_group: admin
      os_group: '*'
      client: client.company.com
      password: OMNIomni11_
      description: "My test win user"
    test_user_2:
      webusername: "unix_user|unix_user_grp|server.company.com"
      name: unix_user
      dp_group: user
      os_group: unix_user_grp
      client: server.company.com

  tasks:

    - name: 0 - Gather user facts
      mfdp_facts:
        gather_subset: users

    - name: 0 - Add user win_user
      ansible.builtin.command: '/opt/omni/bin/omniusers -add -type U -usergroup {{ test_user_1["dp_group"] }} -name {{ test_user_1["name"] }} -group {{ test_user_1["os_group"] }} -client {{ test_user_1["client"] }}'
      when: 'test_user_1["webusername"] not in ansible_facts["dataprotector_users"].keys()'

    - name: 0 - Add user unix_user
      ansible.builtin.command: '/opt/omni/bin/omniusers -add -type U -usergroup {{ test_user_2["dp_group"] }} -name {{ test_user_2["name"] }} -group {{ test_user_2["os_group"] }} -client {{ test_user_2["client"] }}'
      when: 'test_user_2["webusername"]  not in ansible_facts["dataprotector_users"].keys()'

    - name: 1.1 - Del user
      mfdp_users:
        state: absent
        name: '{{ test_user_1["name"] }}'
        os_group: '{{ test_user_1["os_group"] }}'
        client: '{{ test_user_1["client"] }}'
      register: user_removed

    - name: 1.1 - Assert that module result is changed
      assert:
        that: user_removed is changed

    - name: 1.1 - Del user again
      mfdp_users:
        state: absent
        name: '{{ test_user_1["name"] }}'
        os_group: '{{ test_user_1["os_group"] }}'
        client: '{{ test_user_1["client"] }}'
      register: user_removed

    - name: 1.1 - Assert that module result is not changed
      assert:
        that: user_removed is not changed

    - name: 1.1 - Del user again (webusername)
      mfdp_users:
        webusername: '{{ test_user_1["webusername"] }}'
        state: absent
      register: user_removed

    - name: 1.1 - Assert that module result is not changed
      assert:
        that: user_removed is not changed

    - name: 1.2 - Del user by webusername
      mfdp_users:
        webusername: '{{ test_user_2["webusername"] }}'
        state: absent
      register: user_removed

    - name: 1.2 - Assert that module result is changed
      assert:
        that: user_removed is changed

    - name: 1.2 - Del user again
      mfdp_users:
        state: absent
        name: '{{ test_user_2["name"] }}'
        os_group: '{{ test_user_2["os_group"] }}'
        client: '{{ test_user_2["client"] }}'
      register: user_removed

    - name: 1.2 - Assert that module result is not changed
      assert:
        that: user_removed is not changed

    - name: 1.3 - Gather user facts again
      mfdp_facts:
        gather_subset: users

    - name: 1.3 - Assert that added users are not present
      assert:
        that:
          - 'test_user_1["webusername"] not in ansible_facts["dataprotector_users"].keys()'
          - 'test_user_2["webusername"] not in ansible_facts["dataprotector_users"].keys()'